{"version":3,"sources":["components/Note.js","services/notes.js","index.js"],"names":["NoteImported","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","baseUrl","oldNotes","id","date","Note","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","console","log","length","useEffect","noteService","initialNotes","notesToShow","filter","map","url","find","n","changedNote","put","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObjectDb","Date","toISOString","Math","random","post","concat","value","onChange","type","ReactDOM","render","StrictMode","document","getElementById","result"],"mappings":"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","file":"static/js/main.c67c3f01.chunk.js","sourcesContent":["import React from 'react'\n\nconst NoteImported = ({ note, toggleImportance }) => {\n\tconst label = note.important ? 'make not important' : 'make important'\n\treturn (\n\t\t<li className='note'>\n\t\t\t{note.content}\n\t\t\t<button className='btnImportant' onClick={toggleImportance}>{label}</button>\n\t\t</li>\n\t)\n}\n\nexport default NoteImported\n","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api/notes' // back-end build locally using nodejs or json-server\n//const baseUrl = 'https://secure-ridge-67129.herokuapp.com/api/notes' // back-end build locally using nodejs or json-server\nconst baseUrl = '/api/notes'\t\t\t\t\t\t\t\t\t\t\t// front-end and back-end on heroku\n\nconst getAll = () => {\n    //return axios.get(baseUrl)\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll: getAll\n}","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import external module for making notes:\nimport NoteImported from './components/Note'\nimport axios from 'axios'\nimport './index.css'\nimport noteService from './services/notes' // module with backend axios communication \n// const baseUrl = 'https://secure-ridge-67129.herokuapp.com/api/notes'  // back-end on heroku\nconst baseUrl = '/api/notes'\t\t\t\t\t\t\t\t\t\t\t\t// front-end and back-end on heroku\n\n//initialize an array of objects representing the notes to be displayed:\nconst oldNotes = [\n\t{\n\t\tid: 1,\n\t\tcontent: 'HTML is esay (old)',\n\t\tdate: '2019-05-30T17:30:31.098Z',\n\t\timportant: true\n\t},\n\t{\n\t\tid: 2,\n\t\tcontent: 'Browser can execute only JavaScript (old)',\n\t\tdate: '2019-05-30T18:39:34.091Z',\n\t\timportant: false\n\t},\n\t{\n\t\tid: 3,\n\t\tcontent: 'GET and POST are the most important methods of HTTP protocol (old)',\n\t\tdate: '2019-05-30T19:20:14.298Z',\n\t\timportant: true\n\t}\n]\n\n//we could refactor a single note in its own component Note:\nconst Note = ({ note, toggleImportance }) => {\n\treturn (\n\t\t<li>{note.content}</li>\n\t)\n}\n\n//footer with React's inline styles (JavaScript object + style attribute)\nconst Footer = () => {\n\tconst footerStyle = {\n\t\tcolor: 'green',\n\t\tfontStyle: 'italic',\n\t\tfontSize: 16,\n\t}\n\treturn (\n\t\t<div style={footerStyle}>\n\t\t\t<br />\n\t\t\t<em>Note app, Department of Computer Science, University of Helsinki 2020</em>\t\n\t\t</div>\n\t)\n}\n\nconst App = (props) => {\n\t//syntactic sugar for: \n\t//const notes = props.notes\n\t//cool way:\n\t//const {notes} = props\n\t//an alternative would be just 'destructuring':\n\t//const App = ({notes }) => { ...\n\t//but in order to update page when new notes are added let's add them to the App component's state:\n\tconst [oldNotes, setOldNotes] = useState(props.oldNotes)\n\t//and let's now use also 'db.json' file for our notes:\n\tconst [notes, setNotes] = useState([])\n\t//a state storing user-submitted input:\n\tconst [newNote, setNewNote] = useState('a new note...')\n\t//state of notes to be displayed:\n\tconst [showAll, setShowAll] = useState(true)\n\n\t//use axios to talk with json-server\n\t//longer method:\n\t/*const promise = axios.get('http://localhost:3001/notes')\n\tconsole.log(promise)\n\tpromise.then(response => {\n\t\tconsole.log(response)\n\t})*/\n\t//shorter syntax + use of side effects with useEffect() so that it is executed immediately after rendering:\n\tconst hook = () => {\n\t\tconsole.log('effect')\n\t\t// axios\n\t\t// \t.get('http://localhost:3001/notes')\n\t\tnoteService\n\t\t\t.getAll()\n\t\t\t// .then(response => {\n\t\t\t// \tconsole.log('promise fulfilled')\n\t\t\t// \tsetNotes(response.data)\n\t\t\t.then(initialNotes => {\n\t\t\t\tconsole.log('promise fulfilled')\n\t\t\t\tsetNotes(initialNotes)\n\t\t\t})\n\t}\n\tconsole.log('render', notes.length, 'notes: ', notes)\n\t//second parameter [] specify that effect runs only with first render of component\n\tuseEffect(hook, [])\n\n\t//HTML form for adding new notes\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n\t\tconsole.log('button clicked', event.target)\n\t\t//create new object for new note (duplicate) with no id because better sever handle this itself\n\t\tconst noteObjectDb = {\n\t\t\tcontent: newNote,\n\t\t\tdate: new Date().toISOString(),\n\t\t\timportant: Math.random() < 0.5,\n\t\t}\n\t\t//new object sent to server with axios and post method\t\n\t\taxios\n\t\t\t//.post('http://localhost:3001/api/notes', noteObjectDb)\t\t\t\t\t// back-end build locally using nodejs or json-server\n\t\t\t.post(baseUrl, noteObjectDb) \t// back-end build on heroku\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response)\n\t\t\t\t//let's update state 'notes' with new note saved in 'db.json'\n\t\t\t\tsetNotes(notes.concat(response.data))\n\t\t\t\tsetNewNote('a new note...')\n\t\t\t})\n\t}\n\n\t//event handler to synchronize the changes in the input with the component's state:\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewNote(event.target.value)\n\t}\n\n\t//store a list of all notes to be displayed depending on state 'showAll' is true or false, if false show only notes with important property set to 'true'\n\tconst notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n\tconst toggleImportanceOf = (id) => {\n\t\tconsole.log('importance of ' + id + ' needs to be toggled')\n\t\t//or using template string syntax added with ES6\n\t\tconsole.log(`importance of ${id} needs to be toogled`)\n\t\t//HTTP request to note's unique URL with PUT to replace entire note with imoportant field toggled\n\t\t//const url = `http://localhost:3001/api/notes/${id}`\t\t\t\t\t// back-end build locally using nodejs or json-server\n\t\tconst url = `${baseUrl}/${id}` \t// back-end build on heroku\n\t\tconst note = notes.find(n => n.id === id)\n\t\tconst changedNote = { ...note, important: !note.important }\n\t\taxios\n\t\t\t.put(url, changedNote)\n\t\t\t.then(response => {\n\t\t\t\tsetNotes(notes.map(note => note.id !== id ? note : response.data))\n\t\t\t})\n\t}\n\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Notes</h1>\n\n\t\t\t{/*list of notes, first version*/}\n\t\t\t<p>Very first version:</p>\n\t\t\t<ul>\n\t\t\t\t<li>{oldNotes[0].content}</li>\n\t\t\t\t<li>{oldNotes[1].content}</li>\n\t\t\t\t<li>{oldNotes[2].content}</li>\n\t\t\t</ul>\n\n\t\t\t<p>Second version using map (here 'show all/important' does not work):</p>\n\t\t\t<ul>\n\t\t\t\t{/*same result as above but with map*/}\n\t\t\t\t{/*as any JS code in a JSX template it must be wrapped with {}*/}\n\t\t\t\t{notes.map(note => \n\t\t\t\t\t//list items must have unique key\n\t\t\t\t\t<li key={note.id}>{note.content}</li>\n\t\t\t\t)}\n\t\t\t</ul>\n\n\n\t\t\t{/*button to show important/all notes*/}\n\t\t\t<div>\n\t\t\t\t<button onClick={() => setShowAll(!showAll)}>\n\t\t\t\t\tshow {showAll ? 'important' : 'all' }\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<p>Third version refactoring Note in a separate component:</p>\n\t\t\t<ul>\n\t\t\t\t{notesToShow.map(note =>\n\t\t\t\t\t<Note key={note.id} note={note} />\t\n\t\t\t\t)}\n\t\t\t</ul>\n\n\t\t\t<p>Fourth version uses Note as an external module:</p>\n\t\t\t<ul>\n\t\t\t\t{notesToShow.map(note =>\n\t\t\t\t\t<NoteImported \n\t\t\t\t\t\tkey={note.id} \n\t\t\t\t\t\tnote={note} \n\t\t\t\t\t\ttoggleImportance={() => toggleImportanceOf(note.id)}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</ul>\n\n\t\t\t{/*form to add new notes*/}\n\t\t\t<h1>Form</h1>\n\t\t\t<form onSubmit={addNote}>\n\t\t\t\t<input value={newNote} onChange={handleNoteChange}/>\n\t\t\t\t<button type=\"submit\">save</button>\n\t\t\t</form>\n\n\t\t\t<Footer />\n\t\t</div>\n\t)\n}\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App oldNotes={oldNotes} />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n//print the ids of each single note object stored in the array 'oldNotes'\nconst result = oldNotes.map(note => note.id)\nconsole.log(\"result of map: \", result)\n"],"sourceRoot":""}